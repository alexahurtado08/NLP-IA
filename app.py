# app.py
import streamlit as st
from transformers import pipeline

# --- Cargar modelo una sola vez (optimizaci√≥n con cache) ---
@st.cache_resource
def load_model():
    return pipeline("zero-shot-classification", model="facebook/bart-large-mnli")

classifier = load_model()

# --- T√≠tulo de la aplicaci√≥n ---
st.title("üìå Clasificador de T√≥picos Flexible (Zero-Shot)")

st.write("""
Esta aplicaci√≥n demuestra el uso de **Zero-Shot Text Classification**.
El modelo puede clasificar un texto en categor√≠as que **nunca ha visto durante su entrenamiento**.
""")

# --- Entrada de usuario ---
texto = st.text_area("‚úçÔ∏è Ingresa el texto a analizar:", height=150)
etiquetas = st.text_input("üè∑Ô∏è Ingresa categor√≠as separadas por comas (ej: deportes, pol√≠tica, tecnolog√≠a):")

# --- Bot√≥n de Clasificar ---
if st.button("üîç Clasificar"):
    if texto.strip() and etiquetas.strip():
        labels = [et.strip() for et in etiquetas.split(",") if et.strip()]

        # Clasificaci√≥n con el modelo
        resultados = classifier(texto, candidate_labels=labels)

        st.subheader("üìä Resultados de Clasificaci√≥n")
        st.write("Texto analizado:", texto)
        st.write("Categor√≠as:", labels)

        # Mostrar gr√°fico de barras con las puntuaciones
        st.bar_chart({
            "Score": resultados["scores"]
        }, x=None)

        # Mostrar resultados ordenados
        ordenados = sorted(zip(resultados["labels"], resultados["scores"]), key=lambda x: x[1], reverse=True)
        for etiqueta, score in ordenados:
            st.write(f"**{etiqueta}** ‚Üí {score:.4f}")
    else:
        st.warning("‚ö†Ô∏è Por favor ingresa un texto y al menos una categor√≠a.")
